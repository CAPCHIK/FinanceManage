@inject IMediator Mediator

<Title>Список чатов</Title>

<AntList Bordered DataSource="chats" Loading="@(chats == null)">
    <ChildContent Context="item">
        <ListItem>
            <p>@item.ChatName</p>
            <Space>
                <SpaceItem>
                    <NavLink href="@($"purchases/{item.ChatId}/edit")">
                        <Button Size="large" Style="display: flex; align-items: center;">
                            <Icon Type="edit" Theme="outline" />
                            Edit
                        </Button>
                    </NavLink>
                </SpaceItem>
                <SpaceItem>
                    <NavLink href="@($"purchases/{item.ChatId}")">
                        <Button Size="large" Style="display: flex; align-items: center;">
                            <Icon Type="area-chart" Theme="outline" />
                            Total
                        </Button>
                    </NavLink>
                </SpaceItem>

                <SpaceItem>
                    <NavLink href="@($"weekStatistic/{item.ChatId}?&category=Compact")">
                        <Button Size="large" Style="display: flex; align-items: center;">
                            <Icon Type="bar-chart" Theme="outline" />
                            Per Week
                        </Button>
                    </NavLink>
                </SpaceItem>
            </Space>
        </ListItem>
    </ChildContent>
</AntList>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    private List<GetChatsListForUser.Response> chats;

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var state = await authenticationStateTask;
        chats = await Mediator.Send(new GetChatsListForUser.Command(0));
    }
}
@page "/purchases/{ChatId:long}"
@attribute [Authorize]

@using AntDesign.Charts

@inject IMediator mediator

@if (ex is ForbidException)
{
    <AntDesign.Text>У вас нет доступа к информации о данном канале</AntDesign.Text>
}
else if (ex is not null)
{
    <Tooltip Title="@($"{ex.GetType().FullName} : {ex.Message}")" Placement="@PlacementType.Bottom">
        <AntDesign.Text>Непредвиденная ошибка. Пожалуйста, попробуйте позже.</AntDesign.Text>
    </Tooltip>
}
else if (data is null)
{
    <Spin Spinning="true" Tip="Загрузка данных"></Spin>
}
else
{
    <Area Config="config" Data="data" />
    <Line Config="configLine" Data="data" />
}

@code {

    [Parameter]
    public long ChatId { get; set; }

    private Exception ex;

    class GraphItem
    {
        public string Date { get; set; }
        public double Value { get; set; }
        public string Category { get; set; }
    }
    private List<GraphItem> data;
    private async Task<List<GraphItem>> LoadData()
    {
        ex = default;
        data = default;
        try
        {
            var response = await mediator.Send(new GetAllPurchases.Command(ChatId));
            var categoriesCounts = response
                .GroupBy(r => r.Category.Split(' ')[0])
                .Select(g => (category: g.Key, count: g.Count()))
                .ToList();


            var categories = categoriesCounts
                .OrderBy(cc => cc.count)
                .Select(cc => cc.category);

            var middle = categoriesCounts.Select(cc => cc.count).Average();
            config.Legend.Selected = configLine.Legend.Selected = categoriesCounts
                 .Where(cc => cc.count <= middle)
                 .ToDictionary(cc => cc.category, _ => false);

            var result = response
                .Select(r => (date: r.Date.ToString("yyyy-MM-dd"), item: r))
                .GroupBy(r => r.date)
                .OrderBy(g => g.Key)
                .Select(g => (date: g.Key, items: g.GroupBy(itemInDay => itemInDay.item.Category.Split(' ')[0]).ToDictionary(dayGroup => dayGroup.Key, dayGroup => Math.Round(dayGroup.Sum(dg => dg.item.Price), 2))))
                .Select(g => (date: g.date, items: categories.Select(c => (category: c, price: g.items.TryGetValue(c, out var price) ? price : 0))))
                .SelectMany(g => g.items.Select(i => new GraphItem
                {
                    Date = g.date,
                    Category = i.category,
                    Value = i.price
                }))
                .ToList();

            return result;
        }
        catch (Exception ex)
        {
            this.ex = ex;
            return null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            data = await LoadData();
            StateHasChanged();
        }
    }


    AreaConfig config = new AreaConfig
    {
        Title = new AntDesign.Charts.Title
        {
            Visible = true,
            Text = "Покупки за все время"
        },
        XField = "date",
        YField = "value",
        SeriesField = "category",
        XAxis = new ValueCatTimeAxis
        {
            Type = "time",
            Mask = "YYYY-MM-D",
            Visible = true,
            Label = new BaseAxisLabel
            {
                Visible = true,
                AutoRotate = true,
                AutoHide = true
            }
        },
        Legend = new Legend
        {
        },
        Responsive = true,
        //Slider = new AreaConfig.SliderCfg
        //{
        //    Start = 0.3f,
        //    End = 0.8f
        //},
    };
    LineConfig configLine = new LineConfig
    {
        Title = new AntDesign.Charts.Title
        {
            Visible = true,
            Text = "Покупки за все время"
        },
        XField = "date",
        YField = "value",
        SeriesField = "category",
        XAxis = new ValueCatTimeAxis
        {
            Type = "time",
            Mask = "YYYY-MM-D",
            Visible = true,
            Label = new BaseAxisLabel
            {
                Visible = true,
                AutoRotate = true,
                AutoHide = true
            }
        },
        Legend = new Legend
        {
        },
        Responsive = true,
        //Slider = new AreaConfig.SliderCfg
        //{
        //    Start = 0.3f,
        //    End = 0.8f
        //},
    };
}

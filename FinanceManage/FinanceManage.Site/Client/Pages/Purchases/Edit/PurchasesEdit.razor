@page "/purchases/{ChatId:long}/edit/{PageIndex:int}/{PageSize:int}/{SearchText}"
@page "/purchases/{ChatId:long}/edit/{PageIndex:int}/{PageSize:int}"
@page "/purchases/{ChatId:long}/edit/{PageIndex:int}"
@page "/purchases/{ChatId:long}/edit"
@attribute [Authorize]
@inject IMediator Mediator
@inject NavigationManager NavigationManager


<Table DataSource="Purchases"
       Loading="data == null"
       Total="data?.Total ?? 0"
       PageSize="PageSize"
       PageIndex="PageIndex"
       PageSizeChanged="PageSizeChanged"
       PageIndexChanged="PageIndexChanged">
    <TitleTemplate>
        <Text>Редактирование истории покупок</Text>
        <Search Placeholder="Поиск по категории" Size="@InputSize.Default" @bind-Value="@SearchText" OnPressEnter="OnSearch" />
    </TitleTemplate>
    <ChildContent>
        <Column Field="context.Date" Title="Дата" />
        <Column Field="context.Category" Title="Категория">
            <CategoryRender Category="@context.Category" />
        </Column>
        <Column Field="context.Price" Title="Цена" />
        <ActionColumn>
            <Button Size="large" Style="display: flex; align-items: center;" OnClick="() => editModal.Show(context, LoadData)">
                <Icon Type="edit" Theme="outline" />
            </Button>
        </ActionColumn>
    </ChildContent>
</Table>
<EditOnePurchaseModal @ref="editModal" />

@code {
    [Parameter]
    public long ChatId { get; set; }
    [Parameter]
    public int PageIndex { get; set; }
    [Parameter]
    public int PageSize { get; set; } = 10;
    [Parameter]
    public string SearchText { get; set; } = null;


    private List<GetPurchases.Response> Purchases => data?.Items ?? new List<GetPurchases.Response>();
    private ListWrapper<GetPurchases.Response> data;

    private EditOnePurchaseModal editModal;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (PageIndex < 0)
        {
            NavigationManager.NavigateTo($"/purchases/{ChatId}/edit");
            return;
        }
        if (PageIndex < 1)
        {
            NavigationManager.NavigateTo($"/purchases/{ChatId}/edit/{PageIndex = 1}");
            return;
        }
        if (PageSize < 10)
        {
            NavigationManager.NavigateTo($"/purchases/{ChatId}/edit/{PageIndex}/{PageSize = 10}");
            return;
        }
        await LoadData();
    }

    private void PageSizeChanged(int newPageSize)
    {
        NavigationManager.NavigateTo($"/purchases/{ChatId}/edit/{PageIndex}/{newPageSize}/{Uri.EscapeUriString(SearchText)}");
    }
    private void PageIndexChanged(int newPageNum)
    {
        NavigationManager.NavigateTo($"/purchases/{ChatId}/edit/{newPageNum}/{PageSize}/{Uri.EscapeUriString(SearchText)}");
    }

    private void OnSearch(KeyboardEventArgs args)
    {
        NavigationManager.NavigateTo($"/purchases/{ChatId}/edit/{1}/{PageSize}/{Uri.EscapeUriString(SearchText)}");
    }

    private async Task LoadData()
    {
        data = null;
        StateHasChanged();
        data = await Mediator.Send(new GetPurchases.Command(ChatId, PageIndex - 1, PageSize, GetPurchases.Ordering.NewToOld, SearchText));
        StateHasChanged();
    }
}

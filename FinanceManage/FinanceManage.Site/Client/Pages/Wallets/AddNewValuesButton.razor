@inject IJSRuntime JS;

<Button Type="@ButtonType.Primary" OnClick="() => ShowModal()" Loading="@(Wallets == null)">Обновить значения</Button>
@{
    RenderFragment footer =
    @<Space>
        <SpaceItem><Button Disabled="saving" OnClick="() => visible=false">Отмена</Button></SpaceItem>
    </Space>
    ;
}
<Modal Title="Обновление баланса"
       Visible="visible"
       Closable="false"
       Footer="footer"
       ConfirmLoading="saving">
    <Form Model="model"
          LabelColSpan="8"
          WrapperColSpan="16">
        <FormItem Label="Дата">
            <Space>
                <SpaceItem>
                    <DatePicker ShowTime="true" @bind-Value="context.Date" />
                </SpaceItem>
                <SpaceItem>
                    <Text>@dateTimeOffsetPrinter.ToString("zzz")</Text>
                </SpaceItem>
            </Space>
        </FormItem>
        @foreach (var walletItem in context.Values)
        {
            <FormItem Label="@walletItem.WalletTitle">
                <AntDesign.InputNumber @bind-Value="walletItem.Value" />
            </FormItem>
        }
        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Button HtmlType="submit" Type="@ButtonType.Primary">
                Обновить баланс
            </Button>
        </FormItem>
    </Form>

</Modal>

@code {


    [Parameter]
    public List<GetWallets.ResponseObject> Wallets { get; set; }
    private bool visible = false;
    private bool saving = false;
    private DateTimeOffset dateTimeOffsetPrinter;




    private UpdateValuesModal model;


    public void ShowModal()
    {
        model = new UpdateValuesModal
            {
                Date = DateTime.Now,
                Values = Wallets.Select(w => new NewWalletValue
                {
                    Id = w.Id,
                    WalletTitle = w.Title,
                    Value = w.Balance
                })
                        .ToList()
            };
        visible = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            var offset = await JS.InvokeAsync<int>("getLocalTimeOffset");
            var dateTimeOffset = TimeSpan.FromMinutes(-offset);
            dateTimeOffsetPrinter = new DateTimeOffset(DateTime.Now, dateTimeOffset);
        }
    }

    private class UpdateValuesModal
    {
        public DateTime Date { get; set; }
        public List<NewWalletValue> Values { get; set; }
    }
    private class NewWalletValue
    {
        public Guid Id { get; set; }
        public string WalletTitle { get; set; }
        public float? Value { get; set; }
    }
}

@inject IMediator Mediator
@inject IJSRuntime JS

@using AntDesign.Charts

@if (data == null)
{
    if (ex == null)
    {
        <Spin Size="large" Style="margin: 0 100px;" />
    }
    else
    {
        <AntDesign.Text>Не удалось загрузить данные</AntDesign.Text>
    }
}
else
{
    <Pie Data="data" Config="config1" JsConfig="@GetJsConf()" OnFirstRender="(pie) => pie.UpdateChart(data: data)" />
}


@code {

    [Parameter]
    public long ChatId { get; set; }

    private List<GetWallets.ResponseObject> result;
        private float totalSum;
    private record DataItem(string type, float value);
    private List<DataItem> data;
    private Exception ex;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {
                var now = DateTimeOffset.UtcNow;
                result = await Mediator.Send(new GetWallets.Query(ChatId));
                data = result.Select(w => new DataItem(w.Title, w.Balance.GetValueOrDefault(0))).ToList();
                totalSum = result.Sum(w => w.Balance.GetValueOrDefault(0));
            }
            catch (Exception ex)
            {
                this.ex = ex;
            }
            finally
            {

                StateHasChanged();
            }
        }
    }

    private string GetJsConf()
    {
        var baseConf = jsConf;
        var conf = baseConf.Replace("<fontSize>", result == null ?
                                                        14.ToString() :
                                                        (totalSum.ToString().Length switch
                                                        {
                                                            <= 6 => 20,
                                                            _ => 14
                                                        }).ToString());
        return conf;
    }

    readonly string jsConf = @"{
statistic: {
title: {formatter: (i) => i ? i.type : 'Всего'},
content: { style:{ fontSize: <fontSize>, }, },
},
meta: {
value: {
formatter: (v) => window.formatMoney(v ? v : 0),
},
},
label: {
type: 'inner',
autoRotate: false,
offset: '-50%',
style: { textAlign: 'center' },
formatter: (o, a) => { return `${(o.percent * 100).toFixed(0)}%`},
},
interactions: [
{ type: 'element-selected' },
{ type: 'element-active' },
{
type: 'pie-statistic-active',
cfg: {
start: [
{ trigger: 'element:mouseenter', action: 'pie-statistic:change' },
{ trigger: 'legend-item:mouseenter', action: 'pie-statistic:change' },
],
end: [
{ trigger: 'element:mouseleave', action: 'pie-statistic:reset' },
{ trigger: 'legend-item:mouseleave', action: 'pie-statistic:reset' },
],
},
},
]
}";
    readonly PieConfig config1 = new PieConfig
    {
        ForceFit = true,
        Radius = 0.8,
        Padding = "auto",
        AngleField = "value",
        ColorField = "type",
        InnerRadius = 0.64
    };
}

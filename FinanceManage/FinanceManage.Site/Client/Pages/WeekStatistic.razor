@page "/weekStatistic/{ChatId:int}"
@attribute [Authorize]

@using AntDesign.Charts

@inject IMediator Mediator
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager


@if (ex is ForbidException)
{
    <AntDesign.Text>У вас нет доступа к информации о данном канале</AntDesign.Text>
}
else if (ex is not null)
{
    <Tooltip Title="@($"{ex.GetType().FullName} : {ex.Message}")" Placement="@PlacementType.Bottom">
        <AntDesign.Text>Непредвиденная ошибка. Пожалуйста, попробуйте позже.</AntDesign.Text>
    </Tooltip>
}
else if (data1 is null)
{
    <Spin Spinning="true" Tip="Загрузка данных"></Spin>
}
else
{
    <Bar Data="data1" Config="config1" @ref="barChart" />
}

@*<DatePicker TValue="DateTime" Picker="@DatePickerType.Date" @bind-Value="weekStart" OnChange="Load" />*@

@code{
    [Parameter]
    public int ChatId { get; set; }

    IChartComponent barChart;

    private DateTime weekStart;
    private WeekSpending.CategoryMode categoryMode;

    private Exception ex;

    List<KeyValuePair<string, float>> data1;

    readonly BarConfig config1 = new BarConfig
    {
        Title = new AntDesign.Charts.Title
        {
            Visible = true,
            Text = "Траты за последнюю неделю"
        },
        ForceFit = true,
        XField = "value",
        YField = "key",
        XAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = false
            }
        },
        Label = new BarViewConfigLabel
        {
            Visible = true,
            AdjustColor = true,
            AdjustPosition = true,
            Position = "right"
        }
    };



    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        var weekStartString = query.Get("weekStart");

        weekStart = (DateTimeOffset.TryParseExact(weekStartString, "yyyy-MM-dd",
            System.Globalization.CultureInfo.InvariantCulture,
            System.Globalization.DateTimeStyles.AssumeUniversal, out var parsedWeekStart)
            ? parsedWeekStart : DateTimeOffset.UtcNow.Date.AddDays(-6)).Date;

        var categoryModeString = query.Get("category");


        categoryMode = Enum.TryParse<WeekSpending.CategoryMode>(categoryModeString, out var parsedCategory)
            ? parsedCategory : WeekSpending.CategoryMode.Compact;

        await Load();
    }

    private async Task Load()
    {
        try
        {
            data1 = default;
            ex = default;
            var data = await Mediator.Send(new WeekSpending.Command(weekStart, ChatId, categoryMode));
            data1 = data.ByCategory.OrderByDescending(kvp => kvp.Value).ToList();
        }
        catch (Exception ex)
        {
            this.ex = ex;
        }
    }


}

@inherits LayoutComponentBase

@implements IDisposable

@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@inject ILocalStorageService LocalStorage
<Layout Style="min-height: 100vh;">
    <Header>
        <Text style="color: white;">FinanceManage <sub>(@Configuration.GetSection("BuildInfo").GetSection("BuildId").Value)</sub></Text>
    </Header>
    <Content>
        @if (isAuth)
        {

            @Body
        }
        else
        {
            <Row Justify="center" Style="margin-top: 100px">
                <AntDesign.Col Span="24" Style=" display: flex; justify-content: center;">
                    <FinanceManage.Site.Client.Pages.TelegramSignInWidget />
                </AntDesign.Col>
            </Row>
        }
    </Content>
</Layout>

@code {
    bool isAuth = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var version = await LocalStorage.GetItemAsync<string>("version");
        if (version != Configuration.GetSection("Version").Value)
        {
            Console.WriteLine("clearing");
            await LocalStorage.ClearAsync();
            await LocalStorage.SetItemAsync(nameof(version), Configuration.GetSection("Version").Value);
        }
        var telegramUserInfo = await LocalStorage.GetItemAsync<TelegramAuthListener.TelegramUserInfo>("telegramUserInfo");
        if (telegramUserInfo == null)
        {
            isAuth = false;
        }
        else
        {
            isAuth = await TryLoginAsUser(telegramUserInfo);
        }
        TelegramAuthListener.UserAuthenticated += OnUserAuth;
    }

    private async Task<bool> TryLoginAsUser(TelegramAuthListener.TelegramUserInfo user)
    {
        Console.WriteLine("Sending request to server, return true while");
        await LocalStorage.SetItemAsync("telegramUserInfo", user);
        return true;
    }

    private async void OnUserAuth(TelegramAuthListener.TelegramUserInfo user)
    {
        isAuth = await TryLoginAsUser(user);
        StateHasChanged();
    }

    public void Dispose()
    {
        TelegramAuthListener.UserAuthenticated -= OnUserAuth;
    }
}